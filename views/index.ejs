<!DOCTYPE html>
<%- include('../assets/head') %>
<% include(exercisePath) %>
<body>
    <h2><%= exerciseTitle %></h2>
    <p><%= exerciseSentence %></p>
    <div class="d-flex flex-wrap justify-content-center">
        <img src=<%='/images/exercises/exercise'+exerciseNum+'.jpg'%> alt="exercise-img"/>
        <article id="article" class="w-420 border-3 border-primary rounded-top px-10">
            <main id="exercise">
                <%- include(exercisePath) %>
            </main>
        </article>
        <code><pre id="html" class="code"></pre></code>
    </div>

    <script>
        const smallestWidth = ['/1', '12', '14', '15']
        const biggestWidth = ['13']
        if (biggestWidth.indexOf(location.href.substr(location.href.length - 2, 2)) != '-1') {
            document.getElementById('article').classList.replace('w-420', 'w-620')
        } else if (smallestWidth.indexOf(location.href.substr(location.href.length - 2, 2)) == '-1') {
            document.getElementById('article').classList.replace('w-420', 'w-520')
        }

        //-----------------------------------SHOW CODE----------------------------
        const htmlCode = document.getElementById('exercise').innerHTML
        const htmlAtributes = [
            'class', 'type', 'width', 'size', 'href', 'src',
            'alt', 'border', 'cellspacing', 'cellpadding',
            'colspan', 'rowspan', 'align', 'for',
            'id', 'name', 'action', 'method', 'maxlength', 
            'minlength', 'autocomplete', 'disabled', 'checked',
            'multiple', 'value', 'rows', 'cols', '='
        ]
        function colorCodeText (codeString) {
            let codeArray = codeString.split('>');
            codeArray.splice(codeArray.indexOf(''), 1);
            return codeArray.map(elem => {
                let htmlCode = elem.substr(elem.indexOf('<'), elem.length)
                htmlCode = htmlCode.replace('<', '&lt')
                let htmlContentColored = colorHtmlAttribute(htmlCode)
                htmlContentColored = colorHtmlString(htmlContentColored)
                elem = elem.replace('<', '&lt')
                return elem.replace(htmlCode, '<span class="html-element-color">' + htmlContentColored + '&gt;</span>')
            }).join('')
        }
        function colorHtmlString (htmlCode) {
            let htmlCodeChars = htmlCode.split('')
            let response = htmlCode
            let next = true, index = 0, indexCount = 0
            while (next) {
                let i = htmlCodeChars.indexOf('"')
                if (i>=0) {
                    htmlCodeChars[i] = '`'
                    indexCount++
                    if (indexCount === 2) 
                    {
                        const replace = htmlCode.substr(index, (i + 1) - index)
                        response = response.replace(replace, "<string>" + replace + '</string>')
                        indexCount=0
                    }
                    index = i
                }else{
                    next=false
                }
            }
            return response
        }
        function colorHtmlAttribute (htmlCode) {
            htmlCode = htmlCode.replace(/class|type|width|size|href|src|alt|border|cellspacing|cellpadding|colspan|rowspan|align|for|id|name|action|method|maxlength|minlength|autocomplete|disabled|checked|multiple|value|rows|cols|selected|=/g, word => '<attribute>' + word + '</attribute>')
            return htmlCode
        }
        document.getElementById('html').innerHTML = colorCodeText(htmlCode)
    </script>
</body>